// Code generated by MockGen. DO NOT EDIT.
// Source: ./transport_interface.go
//
// Generated by this command:
//
//	mockgen -source=./transport_interface.go -destination=./mock/transport_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	schema "github.com/kakkky/mcp-sdk-go/shared/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockTransport is a mock of Transport interface.
type MockTransport struct {
	ctrl     *gomock.Controller
	recorder *MockTransportMockRecorder
	isgomock struct{}
}

// MockTransportMockRecorder is the mock recorder for MockTransport.
type MockTransportMockRecorder struct {
	mock *MockTransport
}

// NewMockTransport creates a new mock instance.
func NewMockTransport(ctrl *gomock.Controller) *MockTransport {
	mock := &MockTransport{ctrl: ctrl}
	mock.recorder = &MockTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransport) EXPECT() *MockTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransport)(nil).Close))
}

// OnClose mocks base method.
func (m *MockTransport) OnClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose")
}

// OnClose indicates an expected call of OnClose.
func (mr *MockTransportMockRecorder) OnClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockTransport)(nil).OnClose))
}

// OnError mocks base method.
func (m *MockTransport) OnError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0)
}

// OnError indicates an expected call of OnError.
func (mr *MockTransportMockRecorder) OnError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockTransport)(nil).OnError), arg0)
}

// OnReceiveMessage mocks base method.
func (m *MockTransport) OnReceiveMessage(message schema.JsonRpcMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnReceiveMessage", message)
}

// OnReceiveMessage indicates an expected call of OnReceiveMessage.
func (mr *MockTransportMockRecorder) OnReceiveMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceiveMessage", reflect.TypeOf((*MockTransport)(nil).OnReceiveMessage), message)
}

// SendMessage mocks base method.
func (m *MockTransport) SendMessage(message schema.JsonRpcMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTransportMockRecorder) SendMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTransport)(nil).SendMessage), message)
}

// SetOnClose mocks base method.
func (m *MockTransport) SetOnClose(onClose func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnClose", onClose)
}

// SetOnClose indicates an expected call of SetOnClose.
func (mr *MockTransportMockRecorder) SetOnClose(onClose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnClose", reflect.TypeOf((*MockTransport)(nil).SetOnClose), onClose)
}

// SetOnError mocks base method.
func (m *MockTransport) SetOnError(onError func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnError", onError)
}

// SetOnError indicates an expected call of SetOnError.
func (mr *MockTransportMockRecorder) SetOnError(onError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnError", reflect.TypeOf((*MockTransport)(nil).SetOnError), onError)
}

// SetOnReceiveMessage mocks base method.
func (m *MockTransport) SetOnReceiveMessage(onReceiveMessage func(schema.JsonRpcMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnReceiveMessage", onReceiveMessage)
}

// SetOnReceiveMessage indicates an expected call of SetOnReceiveMessage.
func (mr *MockTransportMockRecorder) SetOnReceiveMessage(onReceiveMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnReceiveMessage", reflect.TypeOf((*MockTransport)(nil).SetOnReceiveMessage), onReceiveMessage)
}

// Start mocks base method.
func (m *MockTransport) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTransportMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransport)(nil).Start))
}
