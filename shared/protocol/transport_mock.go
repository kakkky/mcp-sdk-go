// Code generated by MockGen. DO NOT EDIT.
// Source: transport_interface.go
//
// Generated by this command:
//
//	mockgen -source=transport_interface.go -destination=./transport_mock.go -package=protocol
//

// Package protocol is a generated GoMock package.
package protocol

import (
	reflect "reflect"

	schema "github.com/kakkky/mcp-sdk-go/shared/schema"
	gomock "go.uber.org/mock/gomock"
)

// Mocktransport is a mock of transport interface.
type Mocktransport struct {
	ctrl     *gomock.Controller
	recorder *MocktransportMockRecorder
	isgomock struct{}
}

// MocktransportMockRecorder is the mock recorder for Mocktransport.
type MocktransportMockRecorder struct {
	mock *Mocktransport
}

// NewMocktransport creates a new mock instance.
func NewMocktransport(ctrl *gomock.Controller) *Mocktransport {
	mock := &Mocktransport{ctrl: ctrl}
	mock.recorder = &MocktransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransport) EXPECT() *MocktransportMockRecorder {
	return m.recorder
}

// close mocks base method.
func (m *Mocktransport) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close.
func (mr *MocktransportMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*Mocktransport)(nil).close))
}

// onClose mocks base method.
func (m *Mocktransport) onClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onClose")
}

// onClose indicates an expected call of onClose.
func (mr *MocktransportMockRecorder) onClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onClose", reflect.TypeOf((*Mocktransport)(nil).onClose))
}

// onError mocks base method.
func (m *Mocktransport) onError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onError", arg0)
}

// onError indicates an expected call of onError.
func (mr *MocktransportMockRecorder) onError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onError", reflect.TypeOf((*Mocktransport)(nil).onError), arg0)
}

// onMessage mocks base method.
func (m *Mocktransport) onMessage(message schema.JsonRpcMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onMessage", message)
}

// onMessage indicates an expected call of onMessage.
func (mr *MocktransportMockRecorder) onMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onMessage", reflect.TypeOf((*Mocktransport)(nil).onMessage), message)
}

// onReceiveMessage mocks base method.
func (m *Mocktransport) onReceiveMessage(message schema.JsonRpcMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onReceiveMessage", message)
}

// onReceiveMessage indicates an expected call of onReceiveMessage.
func (mr *MocktransportMockRecorder) onReceiveMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onReceiveMessage", reflect.TypeOf((*Mocktransport)(nil).onReceiveMessage), message)
}

// sendMessage mocks base method.
func (m *Mocktransport) sendMessage(message schema.JsonRpcMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// sendMessage indicates an expected call of sendMessage.
func (mr *MocktransportMockRecorder) sendMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendMessage", reflect.TypeOf((*Mocktransport)(nil).sendMessage), message)
}

// setOnClose mocks base method.
func (m *Mocktransport) setOnClose(onClose func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setOnClose", onClose)
}

// setOnClose indicates an expected call of setOnClose.
func (mr *MocktransportMockRecorder) setOnClose(onClose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setOnClose", reflect.TypeOf((*Mocktransport)(nil).setOnClose), onClose)
}

// setOnError mocks base method.
func (m *Mocktransport) setOnError(onError func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setOnError", onError)
}

// setOnError indicates an expected call of setOnError.
func (mr *MocktransportMockRecorder) setOnError(onError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setOnError", reflect.TypeOf((*Mocktransport)(nil).setOnError), onError)
}

// setOnReceiveMessage mocks base method.
func (m *Mocktransport) setOnReceiveMessage(onReceiveMessage func(schema.JsonRpcMessage)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setOnReceiveMessage", onReceiveMessage)
}

// setOnReceiveMessage indicates an expected call of setOnReceiveMessage.
func (mr *MocktransportMockRecorder) setOnReceiveMessage(onReceiveMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setOnReceiveMessage", reflect.TypeOf((*Mocktransport)(nil).setOnReceiveMessage), onReceiveMessage)
}

// start mocks base method.
func (m *Mocktransport) start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "start")
}

// start indicates an expected call of start.
func (mr *MocktransportMockRecorder) start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "start", reflect.TypeOf((*Mocktransport)(nil).start))
}
