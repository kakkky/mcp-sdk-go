// Code generated by MockGen. DO NOT EDIT.
// Source: ./protocol_interface.go
//
// Generated by this command:
//
//	mockgen -source=./protocol_interface.go -destination=./mock/protocol_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	protocol "github.com/kakkky/mcp-sdk-go/shared/protocol"
	schema "github.com/kakkky/mcp-sdk-go/shared/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
	isgomock struct{}
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// Notificate mocks base method.
func (m *MockProtocol) Notificate(notification schema.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notificate", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notificate indicates an expected call of Notificate.
func (mr *MockProtocolMockRecorder) Notificate(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notificate", reflect.TypeOf((*MockProtocol)(nil).Notificate), notification)
}

// Request mocks base method.
func (m *MockProtocol) Request(request schema.Request, resultSchema any) (schema.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", request, resultSchema)
	ret0, _ := ret[0].(schema.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockProtocolMockRecorder) Request(request, resultSchema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockProtocol)(nil).Request), request, resultSchema)
}

// SetNotificationHandler mocks base method.
func (m *MockProtocol) SetNotificationHandler(arg0 schema.Notification, handler func(schema.JsonRpcNotification) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNotificationHandler", arg0, handler)
}

// SetNotificationHandler indicates an expected call of SetNotificationHandler.
func (mr *MockProtocolMockRecorder) SetNotificationHandler(arg0, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotificationHandler", reflect.TypeOf((*MockProtocol)(nil).SetNotificationHandler), arg0, handler)
}

// SetRequestHandler mocks base method.
func (m *MockProtocol) SetRequestHandler(arg0 schema.Request, handler func(schema.JsonRpcRequest) (schema.Result, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestHandler", arg0, handler)
}

// SetRequestHandler indicates an expected call of SetRequestHandler.
func (mr *MockProtocolMockRecorder) SetRequestHandler(arg0, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestHandler", reflect.TypeOf((*MockProtocol)(nil).SetRequestHandler), arg0, handler)
}

// SetValidateCapabilityForMethod mocks base method.
func (m *MockProtocol) SetValidateCapabilityForMethod(validator func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValidateCapabilityForMethod", validator)
}

// SetValidateCapabilityForMethod indicates an expected call of SetValidateCapabilityForMethod.
func (mr *MockProtocolMockRecorder) SetValidateCapabilityForMethod(validator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidateCapabilityForMethod", reflect.TypeOf((*MockProtocol)(nil).SetValidateCapabilityForMethod), validator)
}

// SetValidateNotificationCapability mocks base method.
func (m *MockProtocol) SetValidateNotificationCapability(validator func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValidateNotificationCapability", validator)
}

// SetValidateNotificationCapability indicates an expected call of SetValidateNotificationCapability.
func (mr *MockProtocolMockRecorder) SetValidateNotificationCapability(validator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidateNotificationCapability", reflect.TypeOf((*MockProtocol)(nil).SetValidateNotificationCapability), validator)
}

// Transport mocks base method.
func (m *MockProtocol) Transport() protocol.Transport {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transport")
	ret0, _ := ret[0].(protocol.Transport)
	return ret0
}

// Transport indicates an expected call of Transport.
func (mr *MockProtocolMockRecorder) Transport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transport", reflect.TypeOf((*MockProtocol)(nil).Transport))
}
